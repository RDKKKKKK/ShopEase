name: Cloud Native CI/CD

on:
  push:
    branches:
      - main  # 监听 main 分支

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services-changed: ${{ steps.changed-services.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch main branch
        run: git fetch origin main

      - name: Detect changed services
        id: changed-services
        run: |
          # 获取变更文件
          CHANGED_FILES=$(git diff --name-only origin/main)
          echo "Changed files: $CHANGED_FILES"

          # 定义每个服务及其对应的路径前缀
          declare -A services
          services["newbee-mall-cloud-shop-cart-service"]="newbee-mall-cloud-shop-cart-service/"
          services["newbee-mall-cloud-user-service"]="newbee-mall-cloud-user-service/"
          services["newbee-mall-cloud-order-service"]="newbee-mall-cloud-order-service/"
          services["newbee-mall-cloud-recommend-service"]="newbee-mall-cloud-recommend-service/"
          services["newbee-mall-cloud-goods-service"]="newbee-mall-cloud-goods-service/"

          # 初始化一个空数组存放有变更的服务
          changed_services=()

          # 遍历每个变更文件，检查属于哪个服务
          for file in $CHANGED_FILES; do
            for service in "${!services[@]}"; do
              if [[ "$file" == ${services[$service]}* ]]; then
                if [[ ! " ${changed_services[@]} " =~ " ${service} " ]]; then
                  changed_services+=("$service")
                fi
              fi
            done
          done

          # 如果没有检测到变更的服务，给一个默认值（空服务），防止解析失败
          if [ ${#changed_services[@]} -eq 0 ]; then
            echo "::set-output name=changed::null"
          else
            # 输出变更的服务，作为 JSON 字符串
            echo "::set-output name=changed::$(echo ${changed_services[@]} | jq -R -s -c 'split(" ")')"
          fi

  maven-build:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.services-changed != 'null'  # 只有检测到变化时才执行
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services-changed) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 8  # 使用 Java 1.8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Maven build
        run: |
          # 进入相应服务目录，执行 Maven 打包
          cd ./newbee-mall-cloud/${{ matrix.service }}
          mvn clean package -DskipTests

  docker-build-and-push:
    needs: maven-build
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.services-changed != 'null'  # 只有检测到变化时才执行
    strategy:
      matrix:
        service: ${{ fromJson(needs.maven-build.outputs.services-changed) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build and push Docker image
        run: |
          # 使用 Bash 的参数展开移除 'newbee-mall-cloud' 前缀
          IMAGE_NAME=${{ matrix.service }}
          IMAGE_NAME=${IMAGE_NAME#newbee-mall-cloud-}
          
          # 构建变更的服务镜像并推送到 DockerHub
          docker build -t roderickyoung/shopease:${IMAGE_NAME}-1.0.0 ./newbee-mall-cloud/${{ matrix.service }}
          
          # 推送到 DockerHub
          docker push roderickyoung/shopease:${IMAGE_NAME}-1.0.0